#pragma kernel Reduce

#define THREADS_PER_GROUP 1024

// Input data : data to sum
StructuredBuffer<float> arrayToSum;
// Output data : sum result
globallycoherent RWStructuredBuffer<float> resultReduce;

RWStructuredBuffer<int> spinlock;

int sizeArrayToSum;
// Used for local sums
groupshared float partialSums[THREADS_PER_GROUP];

[numthreads(THREADS_PER_GROUP,1,1)]
void Reduce(uint tid : SV_GroupIndex, uint3 groupIdx : SV_GroupID)
{
    const uint i = groupIdx.x * THREADS_PER_GROUP + tid;
    if (i < sizeArrayToSum)
    {
        partialSums[tid] = arrayToSum[i];
    }
    else
    {
        partialSums[tid] = 0;
    }
    GroupMemoryBarrierWithGroupSync();

    for (uint s = THREADS_PER_GROUP / 2; s > 0; s >>= 1)
    {
        if (tid < s)
        {
            partialSums[tid] += partialSums[tid + s];
        }
        GroupMemoryBarrierWithGroupSync();
    }


    if (tid == 0)
    {
        int old = 1;
        [allow_uav_condition]
        while (old != 0)
        {
            InterlockedCompareExchange(spinlock[0], 0, 1, old);
        }
        // DeviceMemoryBarrier();
        resultReduce[0] += partialSums[0];

        // RELEASE 
        InterlockedExchange(spinlock[0], 0, old);
    }
}
